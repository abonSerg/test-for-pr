//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Accounting.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class AccountingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TOOK=1, GAVE=2, USD=3, WORD=4, AMOUNTDIGIT=5, WHITESPACE=6, NEWLINE=7;
	public const int
		RULE_accounting = 0, RULE_operation = 1, RULE_employee = 2, RULE_amount = 3;
	public static readonly string[] ruleNames = {
		"accounting", "operation", "employee", "amount"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOOK", "GAVE", "USD", "WORD", "AMOUNTDIGIT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Accounting.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AccountingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AccountingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AccountingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AccountingContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(AccountingParser.Eof, 0); }
		public AccountingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accounting; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.EnterAccounting(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.ExitAccounting(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAccountingVisitor<TResult> typedVisitor = visitor as IAccountingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccounting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccountingContext accounting() {
		AccountingContext _localctx = new AccountingContext(Context, State);
		EnterRule(_localctx, 0, RULE_accounting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; operation();
			State = 9; operation();
			State = 10; operation();
			State = 11; operation();
			State = 12; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public EmployeeContext employee() {
			return GetRuleContext<EmployeeContext>(0);
		}
		public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		public ITerminalNode USD() { return GetToken(AccountingParser.USD, 0); }
		public ITerminalNode NEWLINE() { return GetToken(AccountingParser.NEWLINE, 0); }
		public ITerminalNode TOOK() { return GetToken(AccountingParser.TOOK, 0); }
		public ITerminalNode GAVE() { return GetToken(AccountingParser.GAVE, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAccountingVisitor<TResult> typedVisitor = visitor as IAccountingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 2, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; employee();
			State = 15;
			_la = TokenStream.LA(1);
			if ( !(_la==TOOK || _la==GAVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 16; amount();
			State = 17; Match(USD);
			State = 18; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmployeeContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(AccountingParser.WORD, 0); }
		public EmployeeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_employee; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.EnterEmployee(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.ExitEmployee(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAccountingVisitor<TResult> typedVisitor = visitor as IAccountingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmployee(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmployeeContext employee() {
		EmployeeContext _localctx = new EmployeeContext(Context, State);
		EnterRule(_localctx, 4, RULE_employee);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		public ITerminalNode AMOUNTDIGIT() { return GetToken(AccountingParser.AMOUNTDIGIT, 0); }
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.EnterAmount(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAccountingListener typedListener = listener as IAccountingListener;
			if (typedListener != null) typedListener.ExitAmount(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAccountingVisitor<TResult> typedVisitor = visitor as IAccountingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 6, RULE_amount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(AMOUNTDIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '\x1B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', 
		'\x3', '\x3', '\x2', '\x3', '\x4', '\x2', '\x16', '\x2', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x10', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\b', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\v', '\x5', '\x4', '\x3', '\x2', '\v', '\f', '\x5', '\x4', 
		'\x3', '\x2', '\f', '\r', '\x5', '\x4', '\x3', '\x2', '\r', '\xE', '\x5', 
		'\x4', '\x3', '\x2', '\xE', '\xF', '\a', '\x2', '\x2', '\x3', '\xF', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x5', '\x6', '\x4', '\x2', 
		'\x11', '\x12', '\t', '\x2', '\x2', '\x2', '\x12', '\x13', '\x5', '\b', 
		'\x5', '\x2', '\x13', '\x14', '\a', '\x5', '\x2', '\x2', '\x14', '\x15', 
		'\a', '\t', '\x2', '\x2', '\x15', '\x5', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\x6', '\x2', '\x2', '\x17', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\a', '\x2', '\x2', '\x19', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
