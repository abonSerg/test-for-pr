//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Accounting.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class AccountingLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TOOK=1, GAVE=2, USD=3, WORD=4, AMOUNTDIGIT=5, WHITESPACE=6, NEWLINE=7;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T", "A", "O", "K", "E", "G", "I", "V", "U", "S", "D", "LOWERCASE", "UPPERCASE", 
		"TOOK", "GAVE", "USD", "WORD", "AMOUNTDIGIT", "WHITESPACE", "NEWLINE"
	};


	public AccountingLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AccountingLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOOK", "GAVE", "USD", "WORD", "AMOUNTDIGIT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Accounting.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AccountingLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\t', 'j', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x6', '\x12', 'V', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 'W', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x6', '\x14', ']', '\n', '\x14', 
		'\r', '\x14', '\xE', '\x14', '^', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x6', '\x15', '\x64', '\n', '\x15', '\r', '\x15', '\xE', '\x15', 
		'\x65', '\x3', '\x15', '\x5', '\x15', 'i', '\n', '\x15', '\x2', '\x2', 
		'\x16', '\x3', '\x2', '\x5', '\x2', '\a', '\x2', '\t', '\x2', '\v', '\x2', 
		'\r', '\x2', '\xF', '\x2', '\x11', '\x2', '\x13', '\x2', '\x15', '\x2', 
		'\x17', '\x2', '\x19', '\x2', '\x1B', '\x2', '\x1D', '\x3', '\x1F', '\x4', 
		'!', '\x5', '#', '\x6', '%', '\a', '\'', '\b', ')', '\t', '\x3', '\x2', 
		'\x12', '\x4', '\x2', 'V', 'V', 'v', 'v', '\x4', '\x2', '\x43', '\x43', 
		'\x63', '\x63', '\x4', '\x2', 'Q', 'Q', 'q', 'q', '\x4', '\x2', 'M', 'M', 
		'm', 'm', '\x4', '\x2', 'G', 'G', 'g', 'g', '\x4', '\x2', 'I', 'I', 'i', 
		'i', '\x4', '\x2', 'K', 'K', 'k', 'k', '\x4', '\x2', 'X', 'X', 'x', 'x', 
		'\x4', '\x2', 'W', 'W', 'w', 'w', '\x4', '\x2', 'U', 'U', 'u', 'u', '\x4', 
		'\x2', '\x46', '\x46', '\x66', '\x66', '\x3', '\x2', '\x63', '|', '\x3', 
		'\x2', '\x43', '\\', '\x3', '\x2', '\x32', ';', '\x4', '\x2', '\"', '\"', 
		'v', 'v', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x2', '\x61', '\x2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x3', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '-', '\x3', '\x2', '\x2', '\x2', '\a', 
		'/', '\x3', '\x2', '\x2', '\x2', '\t', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x33', '\x3', '\x2', '\x2', '\x2', '\r', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x13', ';', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x17', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1F', 'J', 
		'\x3', '\x2', '\x2', '\x2', '!', 'O', '\x3', '\x2', '\x2', '\x2', '#', 
		'U', '\x3', '\x2', '\x2', '\x2', '%', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\\', '\x3', '\x2', '\x2', '\x2', ')', 'h', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\t', '\x2', '\x2', '\x2', ',', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\t', '\x3', '\x2', '\x2', '.', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\t', '\x4', '\x2', '\x2', '\x30', '\b', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\t', '\x5', '\x2', '\x2', 
		'\x32', '\n', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\t', '\x6', 
		'\x2', '\x2', '\x34', '\f', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\t', '\a', '\x2', '\x2', '\x36', '\xE', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\t', '\b', '\x2', '\x2', '\x38', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\t', '\t', '\x2', '\x2', ':', '\x12', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\t', '\n', '\x2', '\x2', '<', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\t', '\v', '\x2', '\x2', '>', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\t', '\f', '\x2', '\x2', '@', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\t', '\r', '\x2', '\x2', 
		'\x42', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\t', '\xE', 
		'\x2', '\x2', '\x44', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x5', '\x3', '\x2', '\x2', '\x46', 'G', '\x5', '\a', '\x4', '\x2', 'G', 
		'H', '\x5', '\a', '\x4', '\x2', 'H', 'I', '\x5', '\t', '\x5', '\x2', 'I', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x5', '\r', '\a', '\x2', 
		'K', 'L', '\x5', '\x5', '\x3', '\x2', 'L', 'M', '\x5', '\x11', '\t', '\x2', 
		'M', 'N', '\x5', '\v', '\x6', '\x2', 'N', ' ', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x5', '\x13', '\n', '\x2', 'P', 'Q', '\x5', '\x15', '\v', '\x2', 
		'Q', 'R', '\x5', '\x17', '\f', '\x2', 'R', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'V', '\x5', '\x19', '\r', '\x2', 'T', 'V', '\x5', '\x1B', 
		'\xE', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '$', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\t', '\xF', '\x2', '\x2', 'Z', '&', '\x3', '\x2', 
		'\x2', '\x2', '[', ']', '\t', '\x10', '\x2', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\\', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\b', '\x14', '\x2', '\x2', 
		'\x61', '(', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\t', '\x11', 
		'\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'i', '\a', '\x2', '\x2', '\x3', 'h', '\x63', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', '*', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x2', 'U', 'W', '^', '\x65', 'h', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
